{
    "collab_server" : "",
    "contents" : "#' Concert Chinese characters into Pinyin.\n#'\n#' @param mychar character. A Chinese character or string to convert to pinyin\n#' @param method character. The value can be:\n#' - 'quanpin', when '汉字' is to be converted to 'hàn zì',\n#' - 'tone', when '汉字' is to be converted to han4 zi4,\n#' - 'toneless', when '汉字' is to be converted to 'han zi'\n#' @param sep character. Seperation between the converted pinyin.\n#' @param nonezh_replace NULL or character. Define how to convert non-Chinese characters in mychar. NULL means 'let it be'.\n#' @param only_first_letter logical. Wheter only the first letter in pinyin.\n#'\n#' @return pinyin of the given Chinese character.\n#' @export\n#' @examples zh2py()\nzh2py <- function(mychar, method = c('quanpin', 'tone', 'toneless')[1], sep = '_', nonezh_replace = NULL, only_first_letter = FALSE) {\n  py <- pylib(method = method, first = TRUE, only_first_letter)\n  mycharsingle <- strsplit(mychar, split = '')[[1]]\n  myreplace <- function(x) {\n    if (sum(x == zh) == 0) ifelse(is.null(nonezh_replace), x, nonezh_replace) else py[x == zh]\n  }\n  zh2py <- paste(sapply(mycharsingle, myreplace), collapse = sep)\n  return(zh2py)\n}\n\n\n#############################################################\n#' A Pinyin library\n#'\n#' @param method character. The value can be:\n#' - 'quanpin', when '汉字' is to be converted to 'hàn zì',\n#' - 'tone', when '汉字' is to be converted to han4 zi4,\n#' - 'toneless', when '汉字' is to be converted to 'han zi'\n#' @param first logical. Whether only display the first pronounciation of multiple pronounciations of a Chinese character.\n#' @param only_first_letter logical. Wheter only the first letter in pinyin.\n#'\n#' @return a Pinyin library.\n#' @export\n#'\n#' @examples pylib()\n#' pylib(first = FALSE)\npylib <- function(method = c('quanpin', 'tone', 'toneless')[1], first = TRUE, only_first_letter = FALSE) {\n  mystrsplit <- function(x) strsplit(x, split = ' ')[[1]][1]\n  lib <- readLines(paste0(.libPaths(), '/pinyin/lib/zh.txt'), encoding = 'UTF-8', skip = 48) # read source file\n  lib <- lib[49:length(lib)] # skip lines\n  lib <- lib[-grep('^#', lib)] # remove headers\n  lib <- lib[-which(nchar(lib) == 0)] # remove blank lines\n  zh <- substr(lib, 1, 1) # chinese char\n  bracketloc <- regexpr('\\\\(', lib)\n  if (first) {\n    pylib <-  switch( # extract the first pinyin if multiple\n      method,\n      quanpin = sapply(substr(lib, 3, bracketloc - 1), mystrsplit),\n      tone = sapply(substr(lib, bracketloc + 1, nchar(lib) - 1), mystrsplit),\n      toneless = gsub('[1-4]', '', sapply(substr(lib, bracketloc + 1, nchar(lib) - 1), mystrsplit))\n    )\n  } else {\n    pylib <-  switch( # extract all pinyins\n      method,\n      quanpin = substr(lib, 3, bracketloc - 1),\n      tone = substr(lib, bracketloc + 1, nchar(lib) - 1),\n      toneless = gsub('[1-4]', '', substr(lib, bracketloc + 1, nchar(lib) - 1))\n    )\n  }\n  if (only_first_letter) pylib <- substr(pylib, 1, 1)\n  return(pylib)\n}\n\n\n#############################################################\n#' Renames files with Chinese characters to pinyin\n#'\n#' @param mydir character. The folder in which the files are to be renamed.\n#'\n#' @return files with new names.\n#' @export\n#'\n#' @examples file.rename2py()\nfile.rename2py <- function(mydir = '/') {\n  oldname <- dir(mydir, full.names = TRUE)\n  newname <- paste(mydir, sapply(dir(mydir), zh2py, method = 'toneless', sep = '', nonezh_replace = NULL, only_first_letter = TRUE), sep = '/')\n  file.rename(oldname, newname)\n}\n\n#############################################################\n#' Convert the Chinese headers of bookdown .Rmd files into Pinyin\n#'\n#' @param folder character. The folder in which the files are to be converted.\n#' @param remove_curly_bracket logical. Whether to remove existing curly brackets in the headers.\n#'\n#' @return new .Rmd files with Pinyin headers.\n#' @export\n#'\n#' @examples bookdown2py()\nbookdown2py <- function(folder = 'mm', remove_curly_bracket = TRUE) {\n  for (filename in dir(folder, full.names = TRUE)) {\n    # filename <- dir(folder, full.names = TRUE)[1]\n    file.copy(filename, to = paste0(filename, 'backup'))\n    md <- readLines(filename, encoding = 'UTF-8')\n    headerloc <- grep('^#+', md)\n    codeloc <- grep('^```', md)\n    # exclude the lines begining with # but in code\n    if (length(codeloc) > 0) headerloc <- headerloc[!sapply(headerloc, function(x) sum(x > codeloc[seq(1, length(codeloc), by = 2)] & x < codeloc[seq(2, length(codeloc), by = 2)])) == 1]\n    if (remove_curly_bracket) md[headerloc] <- gsub(pattern = '\\\\{.*\\\\}', '', md[headerloc])\n    for (i in headerloc){\n      headerpy <- zh2py(mychar = sub('^#* ', '', md[headerloc]), method = 'toneless', sep = '', nonezh_replace = '', only_first_letter = TRUE)\n      md[headerloc] <- paste(md[headerloc], ' {#', headerpy, '}', sep = '')\n    }\n    writeLines(text = md, filename, useBytes = TRUE)\n  }\n}\n",
    "created" : 1495823607022.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "399828398",
    "id" : "7153A068",
    "lastKnownWriteTime" : 1495824270,
    "last_content_update" : 1495824292971,
    "path" : "D:/googledrive/a9/pinyin/R/foo.R",
    "project_path" : "R/foo.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}